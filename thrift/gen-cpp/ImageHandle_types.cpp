/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ImageHandle_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ImageHandle {


Result::~Result() throw() {
}


void Result::__set_desc(const std::string& val) {
  this->desc = val;
}

void Result::__set_ret(const std::string& val) {
  this->ret = val;
}

const char* Result::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t Result::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t Result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->ret);
          this->__isset.ret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Result::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Result");

  xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->desc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ret", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->ret);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Result &a, Result &b) {
  using ::std::swap;
  swap(a.desc, b.desc);
  swap(a.ret, b.ret);
  swap(a.__isset, b.__isset);
}

Result::Result(const Result& other0) {
  desc = other0.desc;
  ret = other0.ret;
  __isset = other0.__isset;
}
Result& Result::operator=(const Result& other1) {
  desc = other1.desc;
  ret = other1.ret;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Result& obj) {
  using apache::thrift::to_string;
  out << "Result(";
  out << "desc=" << to_string(obj.desc);
  out << ", " << "ret=" << to_string(obj.ret);
  out << ")";
  return out;
}

} // namespace
