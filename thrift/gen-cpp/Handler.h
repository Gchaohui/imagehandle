/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Handler_H
#define Handler_H

#include <thrift/TDispatchProcessor.h>
#include "ImageHandle_types.h"

namespace ImageHandle {

class HandlerIf {
 public:
  virtual ~HandlerIf() {}
  virtual void Feature(std::vector<double> & _return, const std::string& image) = 0;
  virtual void DeepLearning(Result& _return, const std::string& image) = 0;
  virtual void ObjectDetectionDL(Result& _return, const std::string& image) = 0;
};

class HandlerIfFactory {
 public:
  typedef HandlerIf Handler;

  virtual ~HandlerIfFactory() {}

  virtual HandlerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HandlerIf* /* handler */) = 0;
};

class HandlerIfSingletonFactory : virtual public HandlerIfFactory {
 public:
  HandlerIfSingletonFactory(const boost::shared_ptr<HandlerIf>& iface) : iface_(iface) {}
  virtual ~HandlerIfSingletonFactory() {}

  virtual HandlerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HandlerIf* /* handler */) {}

 protected:
  boost::shared_ptr<HandlerIf> iface_;
};

class HandlerNull : virtual public HandlerIf {
 public:
  virtual ~HandlerNull() {}
  void Feature(std::vector<double> & /* _return */, const std::string& /* image */) {
    return;
  }
  void DeepLearning(Result& /* _return */, const std::string& /* image */) {
    return;
  }
  void ObjectDetectionDL(Result& /* _return */, const std::string& /* image */) {
    return;
  }
};

typedef struct _Handler_Feature_args__isset {
  _Handler_Feature_args__isset() : image(false) {}
  bool image :1;
} _Handler_Feature_args__isset;

class Handler_Feature_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Handler_Feature_args(const Handler_Feature_args&);
  Handler_Feature_args& operator=(const Handler_Feature_args&);
  Handler_Feature_args() : image() {
  }

  virtual ~Handler_Feature_args() throw();
  std::string image;

  _Handler_Feature_args__isset __isset;

  void __set_image(const std::string& val);

  bool operator == (const Handler_Feature_args & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    return true;
  }
  bool operator != (const Handler_Feature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Handler_Feature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Handler_Feature_args& obj);
};


class Handler_Feature_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Handler_Feature_pargs() throw();
  const std::string* image;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Handler_Feature_pargs& obj);
};

typedef struct _Handler_Feature_result__isset {
  _Handler_Feature_result__isset() : success(false) {}
  bool success :1;
} _Handler_Feature_result__isset;

class Handler_Feature_result {
 public:

  static const char* ascii_fingerprint; // = "225C301FF7EFA8615B0ADBDADA5E5084";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x5C,0x30,0x1F,0xF7,0xEF,0xA8,0x61,0x5B,0x0A,0xDB,0xDA,0xDA,0x5E,0x50,0x84};

  Handler_Feature_result(const Handler_Feature_result&);
  Handler_Feature_result& operator=(const Handler_Feature_result&);
  Handler_Feature_result() {
  }

  virtual ~Handler_Feature_result() throw();
  std::vector<double>  success;

  _Handler_Feature_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  bool operator == (const Handler_Feature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Handler_Feature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Handler_Feature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Handler_Feature_result& obj);
};

typedef struct _Handler_Feature_presult__isset {
  _Handler_Feature_presult__isset() : success(false) {}
  bool success :1;
} _Handler_Feature_presult__isset;

class Handler_Feature_presult {
 public:

  static const char* ascii_fingerprint; // = "225C301FF7EFA8615B0ADBDADA5E5084";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x5C,0x30,0x1F,0xF7,0xEF,0xA8,0x61,0x5B,0x0A,0xDB,0xDA,0xDA,0x5E,0x50,0x84};


  virtual ~Handler_Feature_presult() throw();
  std::vector<double> * success;

  _Handler_Feature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Handler_Feature_presult& obj);
};

typedef struct _Handler_DeepLearning_args__isset {
  _Handler_DeepLearning_args__isset() : image(false) {}
  bool image :1;
} _Handler_DeepLearning_args__isset;

class Handler_DeepLearning_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Handler_DeepLearning_args(const Handler_DeepLearning_args&);
  Handler_DeepLearning_args& operator=(const Handler_DeepLearning_args&);
  Handler_DeepLearning_args() : image() {
  }

  virtual ~Handler_DeepLearning_args() throw();
  std::string image;

  _Handler_DeepLearning_args__isset __isset;

  void __set_image(const std::string& val);

  bool operator == (const Handler_DeepLearning_args & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    return true;
  }
  bool operator != (const Handler_DeepLearning_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Handler_DeepLearning_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Handler_DeepLearning_args& obj);
};


class Handler_DeepLearning_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Handler_DeepLearning_pargs() throw();
  const std::string* image;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Handler_DeepLearning_pargs& obj);
};

typedef struct _Handler_DeepLearning_result__isset {
  _Handler_DeepLearning_result__isset() : success(false) {}
  bool success :1;
} _Handler_DeepLearning_result__isset;

class Handler_DeepLearning_result {
 public:

  static const char* ascii_fingerprint; // = "376927F9F05AD7BDDE30676F7648F224";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x69,0x27,0xF9,0xF0,0x5A,0xD7,0xBD,0xDE,0x30,0x67,0x6F,0x76,0x48,0xF2,0x24};

  Handler_DeepLearning_result(const Handler_DeepLearning_result&);
  Handler_DeepLearning_result& operator=(const Handler_DeepLearning_result&);
  Handler_DeepLearning_result() {
  }

  virtual ~Handler_DeepLearning_result() throw();
  Result success;

  _Handler_DeepLearning_result__isset __isset;

  void __set_success(const Result& val);

  bool operator == (const Handler_DeepLearning_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Handler_DeepLearning_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Handler_DeepLearning_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Handler_DeepLearning_result& obj);
};

typedef struct _Handler_DeepLearning_presult__isset {
  _Handler_DeepLearning_presult__isset() : success(false) {}
  bool success :1;
} _Handler_DeepLearning_presult__isset;

class Handler_DeepLearning_presult {
 public:

  static const char* ascii_fingerprint; // = "376927F9F05AD7BDDE30676F7648F224";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x69,0x27,0xF9,0xF0,0x5A,0xD7,0xBD,0xDE,0x30,0x67,0x6F,0x76,0x48,0xF2,0x24};


  virtual ~Handler_DeepLearning_presult() throw();
  Result* success;

  _Handler_DeepLearning_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Handler_DeepLearning_presult& obj);
};

typedef struct _Handler_ObjectDetectionDL_args__isset {
  _Handler_ObjectDetectionDL_args__isset() : image(false) {}
  bool image :1;
} _Handler_ObjectDetectionDL_args__isset;

class Handler_ObjectDetectionDL_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Handler_ObjectDetectionDL_args(const Handler_ObjectDetectionDL_args&);
  Handler_ObjectDetectionDL_args& operator=(const Handler_ObjectDetectionDL_args&);
  Handler_ObjectDetectionDL_args() : image() {
  }

  virtual ~Handler_ObjectDetectionDL_args() throw();
  std::string image;

  _Handler_ObjectDetectionDL_args__isset __isset;

  void __set_image(const std::string& val);

  bool operator == (const Handler_ObjectDetectionDL_args & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    return true;
  }
  bool operator != (const Handler_ObjectDetectionDL_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Handler_ObjectDetectionDL_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Handler_ObjectDetectionDL_args& obj);
};


class Handler_ObjectDetectionDL_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Handler_ObjectDetectionDL_pargs() throw();
  const std::string* image;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Handler_ObjectDetectionDL_pargs& obj);
};

typedef struct _Handler_ObjectDetectionDL_result__isset {
  _Handler_ObjectDetectionDL_result__isset() : success(false) {}
  bool success :1;
} _Handler_ObjectDetectionDL_result__isset;

class Handler_ObjectDetectionDL_result {
 public:

  static const char* ascii_fingerprint; // = "376927F9F05AD7BDDE30676F7648F224";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x69,0x27,0xF9,0xF0,0x5A,0xD7,0xBD,0xDE,0x30,0x67,0x6F,0x76,0x48,0xF2,0x24};

  Handler_ObjectDetectionDL_result(const Handler_ObjectDetectionDL_result&);
  Handler_ObjectDetectionDL_result& operator=(const Handler_ObjectDetectionDL_result&);
  Handler_ObjectDetectionDL_result() {
  }

  virtual ~Handler_ObjectDetectionDL_result() throw();
  Result success;

  _Handler_ObjectDetectionDL_result__isset __isset;

  void __set_success(const Result& val);

  bool operator == (const Handler_ObjectDetectionDL_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Handler_ObjectDetectionDL_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Handler_ObjectDetectionDL_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Handler_ObjectDetectionDL_result& obj);
};

typedef struct _Handler_ObjectDetectionDL_presult__isset {
  _Handler_ObjectDetectionDL_presult__isset() : success(false) {}
  bool success :1;
} _Handler_ObjectDetectionDL_presult__isset;

class Handler_ObjectDetectionDL_presult {
 public:

  static const char* ascii_fingerprint; // = "376927F9F05AD7BDDE30676F7648F224";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x69,0x27,0xF9,0xF0,0x5A,0xD7,0xBD,0xDE,0x30,0x67,0x6F,0x76,0x48,0xF2,0x24};


  virtual ~Handler_ObjectDetectionDL_presult() throw();
  Result* success;

  _Handler_ObjectDetectionDL_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Handler_ObjectDetectionDL_presult& obj);
};

class HandlerClient : virtual public HandlerIf {
 public:
  HandlerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HandlerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Feature(std::vector<double> & _return, const std::string& image);
  void send_Feature(const std::string& image);
  void recv_Feature(std::vector<double> & _return);
  void DeepLearning(Result& _return, const std::string& image);
  void send_DeepLearning(const std::string& image);
  void recv_DeepLearning(Result& _return);
  void ObjectDetectionDL(Result& _return, const std::string& image);
  void send_ObjectDetectionDL(const std::string& image);
  void recv_ObjectDetectionDL(Result& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HandlerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HandlerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HandlerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Feature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeepLearning(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ObjectDetectionDL(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HandlerProcessor(boost::shared_ptr<HandlerIf> iface) :
    iface_(iface) {
    processMap_["Feature"] = &HandlerProcessor::process_Feature;
    processMap_["DeepLearning"] = &HandlerProcessor::process_DeepLearning;
    processMap_["ObjectDetectionDL"] = &HandlerProcessor::process_ObjectDetectionDL;
  }

  virtual ~HandlerProcessor() {}
};

class HandlerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HandlerProcessorFactory(const ::boost::shared_ptr< HandlerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HandlerIfFactory > handlerFactory_;
};

class HandlerMultiface : virtual public HandlerIf {
 public:
  HandlerMultiface(std::vector<boost::shared_ptr<HandlerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HandlerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HandlerIf> > ifaces_;
  HandlerMultiface() {}
  void add(boost::shared_ptr<HandlerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Feature(std::vector<double> & _return, const std::string& image) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Feature(_return, image);
    }
    ifaces_[i]->Feature(_return, image);
    return;
  }

  void DeepLearning(Result& _return, const std::string& image) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeepLearning(_return, image);
    }
    ifaces_[i]->DeepLearning(_return, image);
    return;
  }

  void ObjectDetectionDL(Result& _return, const std::string& image) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ObjectDetectionDL(_return, image);
    }
    ifaces_[i]->ObjectDetectionDL(_return, image);
    return;
  }

};

} // namespace

#endif
