/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImageHandle_TYPES_H
#define ImageHandle_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ImageHandle {

class Result;

typedef struct _Result__isset {
  _Result__isset() : desc(false), ret(false) {}
  bool desc :1;
  bool ret :1;
} _Result__isset;

class Result {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Result(const Result&);
  Result& operator=(const Result&);
  Result() : desc(), ret() {
  }

  virtual ~Result() throw();
  std::string desc;
  std::string ret;

  _Result__isset __isset;

  void __set_desc(const std::string& val);

  void __set_ret(const std::string& val);

  bool operator == (const Result & rhs) const
  {
    if (!(desc == rhs.desc))
      return false;
    if (!(ret == rhs.ret))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Result& obj);
};

void swap(Result &a, Result &b);

} // namespace

#endif
